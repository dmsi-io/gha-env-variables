name: 'Setup Environment Variables'
description: 'Exports set list of environment variables to GITHUB_ENV with sensible defaults.'

inputs:
  GCP_PROJECT_ID:
    description: 'ProjectID of the GCP project to deploy to.'
    required: true
  REGISTRY_HOSTNAME:
    description: 'Hostname of Container Registry'
    default: 'gcr.io'
    required: false
  TLD:
    description: 'Top Level Domain to create subdomain on.'
    required: true
  NAMESPACE:
    description: 'Allows to override the desired NAMESPACE variable'
    required: false
  SERVICE_NAME:
    description: 'Allows to override the desired SERVICE_NAME variable'
    required: false
    default: ${{ github.repository }}

outputs:
  short_sha:
    description: 'Short SHA'
    value: ${{ steps.SHORT_SHA.outputs.short_sha }}
  env:
    description: 'Kubernetes Environment'
    value: ${{ steps.ENV.outputs.env }}
  namespace:
    description: 'Kubernetes Namespace'
    value: ${{ steps.NAMESPACE.outputs.namespace }}
  service_name:
    description: 'Kubernetes Service Name'
    value: ${{ steps.SERVICE_NAME.outputs.service_name }}
  build_image:
    description: 'Docker Build Image'
    value: ${{ steps.BUILD_IMAGE.outputs.BUILD_IMAGE }}
  hostname:
    description: 'Hostname'
    value: ${{ steps.HOSTNAME.outputs.hostname }}
  cert_name:
    description: 'TLS Certificate Name'
    value: ${{ steps.CERT_NAME.outputs.cert_name }}

runs:
  using: 'composite'
  steps:
    - name: SHORT_SHA
      id: SHORT_SHA
      run: |
        SHORT_SHA=${GITHUB_SHA:0:7}
        echo "SHORT_SHA=$SHORT_SHA"
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
      shell: bash

    - name: Get Ref
      id: get_ref
      uses: dmsi-io/gha-get-ref@v1
      with:
        custom_ref: ${{ inputs.NAMESPACE }}
    
    - name: ENV
      id: ENV
      run: |
        ENV=${{ github.ref_type == 'tag' &&  'production' || 'development'}}
        echo "ENV=$ENV"
        echo "ENV=$ENV" >> $GITHUB_ENV
        echo "env=$ENV" >> $GITHUB_OUTPUT
      shell: bash

    - name: NAMESPACE
      id: NAMESPACE
      run: |
        NAMESPACE=$(${{ github.action_path }}/clean_variable.sh ${{ steps.get_ref.outputs.ref_name }})

        echo "NAMESPACE=$NAMESPACE"
        echo "NAMESPACE=$NAMESPACE" >> $GITHUB_ENV
        echo "namespace=$NAMESPACE" >> $GITHUB_OUTPUT
      shell: bash

    - name: SERVICE_NAME
      id: SERVICE_NAME
      run: |
        SERVICE_NAME=$(${{ github.action_path }}/clean_variable.sh ${{ inputs.SERVICE_NAME }})

        echo "SERVICE_NAME=$SERVICE_NAME"
        echo "SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
        echo "service_name=$SERVICE_NAME" >> $GITHUB_OUTPUT
      shell: bash

    - name: Docker Tag
      id: docker_tag
      run: |
        SEMVER_REGEX="^(v*0|v*[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$"
        RELEASE_REGEX="release/*"
        REF="${{ steps.get_ref.outputs.ref_name }}"

        if [ "${{ github.ref_type }}" = "tag" ]; then
          echo "tag_name=$REF" >> $GITHUB_OUTPUT
        elif [[ "$REF" =~ $RELEASE_REGEX ]] && [[ "${REF##*/}" =~ $SEMVER_REGEX ]]; then
          echo "tag_name=${REF##*/}" >> $GITHUB_OUTPUT
        else
          echo "tag_name=$SHORT_SHA" >> $GITHUB_OUTPUT
        fi
      shell: bash

    - name: BUILD_IMAGE
      id: BUILD_IMAGE
      run: |
        BUILD_IMAGE=${{ inputs.REGISTRY_HOSTNAME }}/${{ inputs.GCP_PROJECT_ID }}/$SERVICE_NAME:${{ steps.docker_tag.outputs.tag_name }}

        echo "BUILD_IMAGE=$BUILD_IMAGE"
        echo "BUILD_IMAGE=$BUILD_IMAGE" >> $GITHUB_ENV
        echo "build_image=$BUILD_IMAGE" >> $GITHUB_OUTPUT
      shell: bash

    - name: HOSTNAME
      id: HOSTNAME
      run: |
        HOSTNAME=$NAMESPACE.${{ inputs.TLD }}
        echo "HOSTNAME=$HOSTNAME"
        echo "HOSTNAME=$HOSTNAME" >> $GITHUB_ENV
        echo "hostname=$HOSTNAME" >> $GITHUB_OUTPUT
      shell: bash

    - name: CERT_NAME
      id: CERT_NAME
      run: |
        TLD=${{ inputs.TLD }}
        CERT_NAME=wildcard-${TLD//./-}
        echo "CERT_NAME=$CERT_NAME"
        echo "CERT_NAME=$CERT_NAME" >> $GITHUB_ENV
        echo "cert_name=$CERT_NAME" >> $GITHUB_OUTPUT
      shell: bash
